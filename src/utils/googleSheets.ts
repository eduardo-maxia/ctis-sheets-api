import { GoogleSpreadsheet, GoogleSpreadsheetRow } from 'google-spreadsheet';
import { JWT } from 'google-auth-library'
// const keys = require('../../gcp_auth.json');
import * as keys from './gcp_auth.json'

// Initialize auth - see https://theoephraim.github.io/node-google-spreadsheet/#/guides/authentication
const serviceAccountAuth = new JWT({
  // env var values here are copied from service account credentials generated by google
  // see "Authentication" section in docs for more info
  email: keys.client_email,
  key: keys.private_key,
  scopes: [
    'https://www.googleapis.com/auth/spreadsheets',
  ],
});

function PromiseSequential(promises: Promise<any>[]) {
  return promises.reduce((promise, next) =>
    promise.then(result => next.then(Array.prototype.concat.bind(result))),
    Promise.resolve([]))
}


export async function basicUpdates() {
  const doc = new GoogleSpreadsheet(process.env.SHEET_ID!, serviceAccountAuth);

  await doc.loadInfo(); // loads document properties and worksheets
  console.log(doc.title);
  await doc.updateProperties({ title: 'Planilha de Pagamentos CTIS' });

  const gestaoSheet = doc.sheetsByTitle['Gestão'];

  const sheet = doc.sheetsByTitle['TerQui21']; // or use `doc.sheetsById[id]` or `doc.sheetsByTitle[title]`

  // Get month to generate
  await gestaoSheet.loadCells('A4')
  const month = gestaoSheet.getCellByA1('A4').stringValue

  if (!month) return

  // Now generate the payments by iterating over all active students and creating a new row for each one
  // Get all active students
  let activeStudents: GoogleSpreadsheetRow<Record<string, any>>[] = []
  // 2-13: Máximo de 12 alunos
  await Promise.all(doc.sheetsByIndex.map(async (sheet) => {
    if (sheet.title === 'Gestão' || sheet.title === 'Pagamentos') return
    await sheet.loadCells('A2:O13')
    const rows = await sheet.getRows({ limit: 12 });
    activeStudents.push(...rows.filter(row => row.get('Nome')?.length > 0))
  }))


  // Now go to the payments sheet to generate all payments
  const paymentsSheet = doc.sheetsByTitle['Pagamentos'];
  const allPayments = await paymentsSheet.getRows()
  const promises = activeStudents.map(async student => {
    // Before adding the payment, check if it already exists
    if (allPayments.filter(p => p.get('TurmaReferencia') === student._worksheet.title
      && p.get('MesReferencia') === month && p.get('Nome') === student.get('Nome')
    ).length > 0) return Promise.resolve()

    return paymentsSheet.addRow({
      Nome: student.get('Nome'),
      CPF: student.get('CPF'),
      DataVencimento: student.get('DataVencimento'),
      MesReferencia: month,
      TurmaReferencia: student._worksheet.title,
      Status: 'PENDENTE'
    }).then(pagamento => {
      // Create the link between the payment on this table and the original visialization table
      student.set(month, `=Pagamentos!F${pagamento.rowNumber}`)
      student.save()
    })
  })
  await PromiseSequential(promises)
}

